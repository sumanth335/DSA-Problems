/*Question: In a sorted array we need to find number of elements smaller than the given value, also we need to print the sum of those elements smaller than the given value prefixSum[]: this array stores the sum of the elements cumulatively such that we can directly get the sum of those elements smaller than the given valueAlgorithm: BinarySearch, time: O(log(n))*/import java.util.*;class BishuAndSoldiers{	public static void main(String args[]){		int arr[]= {1,2,2,3,4,5,6,7,8};		// power of bishu in different rounds		int power[]={2,5,10};  //three-rounds		int prefixSum[]=new int[arr.length];		prefixSum[0]=arr[0];		for(int i=1;i<arr.length;i++)			prefixSum[i]=prefixSum[i-1]+arr[i];		for(int i=0;i<power.length;i++){			getSmallerElements(arr,power[i],prefixSum);		}	}	static void getSmallerElements(int arr[], int power, int[] prefixSum){		int lo=0, hi=arr.length-1;		int floor=-1;		// int ceil=-1;		while(lo<=hi){			int mid=lo+(hi-lo)/2;			if(power<arr[mid]){				// ceil=mid; //alternate way it'll store next big element than given power				hi=mid-1;			}			// on getting equality mid will move to right side, 			// returns last occurence of found element			else if(power>=arr[mid]){				floor = mid;				lo=mid+1;  //keep pushing right even on equality			}		}		System.out.println("Number of elements <=  power: "+(floor+1));		System.out.println("Sum of elements <= power: "+ prefixSum[floor]+"\n");		// ceil = ceil==-1 ? arr.length : ceil;		// //when ceil is not found then default value is "-1". Ex: power=10, arr={1,2,3}; O/p=-1		// System.out.println("ceil: "+ ceil);	}}